AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    AWS SAM Template for making API Gateway with APIGatewayRole for invoking lambda functions.
    Generate lambda functions according to docs\Visitor Management System Swagger 1.yaml

Globals:
    Function:
        Timeout: 3
        Runtime: python3.11
        Environment:
            Variables:
                Environment: !Ref Environment
                BucketName: !Ref BucketName
                DynamoDBTableName: !Ref DynamoDBTable
    Api:
        Cors:
            AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
            AllowOrigin: "'*'"

Parameters:
    Environment:
        Type: String
        Default: dev
        AllowedValues:
            - dev
            - prod
        Description: Environment name

    BucketName:
        Type: String
        Description: Name of the S3 bucket

    DynamoDBTable:
        Type: String
        Description: Name of the DynamoDB table

    UserPoolClientId:
        Type: String
        Description: User Pool Client ID

    UserPoolId:
        Type: String
        Description: User Pool ID

    LambdaIAMRoleArn:
        Type: String
        Description: ARN of the Lambda IAM Role

    CognitoPoolArn:
        Type: String
        Description: ARN of the Cognito Pool

Resources:
    ApiGatewayRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${Environment}--ApiGatewayRole
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: !Sub ${Environment}--ApiGatewayRolePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:InvokeFunction
                            Resource:
                                [
                                    !GetAtt VMSLoginGET.Arn,
                                    !GetAtt VMSVisitorGET.Arn,
                                    !GetAtt VMSVisitorPOST.Arn,
                                    !GetAtt VMSVisitorIdGET.Arn,
                                    !GetAtt VMSVisitorIdPUT.Arn,
                                    !GetAtt VMSVisitGET.Arn,
                                    !GetAtt VMSVisitPOST.Arn,
                                    !GetAtt VMSVisitIdGET.Arn,
                                    !GetAtt VMSVisitIdPATCH.Arn,
                                    !GetAtt VMSCardGET.Arn,
                                    !GetAtt VMSCardPOST.Arn,
                                    !GetAtt VMSCardIdGET.Arn,
                                    !GetAtt VMSCardIdPUT.Arn,
                                    !GetAtt VMSCardIdDELETE.Arn,
                                    !GetAtt VMSApprovalGET.Arn,
                                    !GetAtt VMSApprovalPOST.Arn,
                                    !GetAtt VMSApprovalIdGET.Arn,
                                    !GetAtt VMSApprovalIdPATCH.Arn,
                                ]

    VMSApiGateway:
        Type: AWS::Serverless::Api
        Properties:
            StageName: !Ref Environment

            DefinitionBody:
                Fn::Transform:
                    Name: AWS::Include
                    Parameters:
                        Location: docs/VMS_swagger.yaml

            GatewayResponses:
                DEFAULT_4XX:
                    ResponseParameters:
                        Headers:
                            Access-Control-Allow-Origin: "'*'"
                            Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                            Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"

                DEFAULT_5XX:
                    ResponseParameters:
                        Headers:
                            Access-Control-Allow-Origin: "'*'"
                            Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                            Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"

    VMSLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: !Sub ${Environment}-VMS-Layer
            Description: VMS Lambda Layer
            ContentUri: ./src/common
            CompatibleRuntimes:
                - python3.11

    VMSLoginGET:
        Type: AWS::Serverless::Function
        Properties:
            Environment:
                Variables:
                    UserPoolClientId: !Ref UserPoolClientId
                    UserPoolId: !Ref UserPoolId

            FunctionName: !Sub ${Environment}-VMS-login-GET
            CodeUri: ./src/functions/login
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer

            Events:
                VMSLoginGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /login/{proxy+}
                        Method: post

                Options:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /login/{proxy+}
                        Method: options
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSForgotPasswordPOST:
        Type: AWS::Serverless::Function
        Properties:
            Environment:
                Variables:
                    UserPoolClientId: !Ref UserPoolClientId
                    UserPoolId: !Ref UserPoolId

            FunctionName: !Sub ${Environment}-VMS-forgot-password-POST
            CodeUri: ./src/functions/post_forgot_password
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer

            Role: !Ref LambdaIAMRoleArn

            Events:
                VMSForgotPasswordPOST:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /forgot_password/{proxy+}
                        Method: post
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable

    VMSVisitorGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visitor-GET
            CodeUri: ./src/functions/get_visitor
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitorGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visitor/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitorPOST:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visitor-POST
            CodeUri: ./src/functions/post_visitor
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Role: !Ref LambdaIAMRoleArn
            Events:
                VMSVisitorPOST:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visitor/{proxy+}
                        Method: post
                Options:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visitor/{proxy+}
                        Method: options

            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitorIdGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visitor-id-GET
            CodeUri: ./src/functions/get_visitor_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitorVisitorIdGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visitor/{id}/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitorIdPUT:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visitor-id-PUT
            CodeUri: ./src/functions/put_visitor_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitorVisitorIdPUT:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visitor/{id}/{proxy+}
                        Method: put
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable

    VMSVisitGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visit-GET
            CodeUri: ./src/functions/get_visit
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visit/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitPOST:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visit-POST
            CodeUri: ./src/functions/post_visit
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitPOST:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visit/{proxy+}
                        Method: post
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitIdGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visit-id-GET
            CodeUri: ./src/functions/get_visit_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Role: !Ref LambdaIAMRoleArn
            Events:
                VMSVisitVisitIdGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visit/{id}/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSVisitIdPATCH:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-visit-id-PATCH
            CodeUri: ./src/functions/patch_visit_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSVisitVisitIdPATCH:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /visit/{id}/{proxy+}
                        Method: patch
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable

    VMSCardGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-card-GET
            CodeUri: ./src/functions/get_card
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSCardGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /card/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSCardPOST:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-card-POST
            CodeUri: ./src/functions/post_card
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSCardPOST:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /card/{proxy+}
                        Method: post
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSCardIdGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-card-id-GET
            CodeUri: ./src/functions/get_card_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSCardCardIdGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /card/{id}/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSCardIdPUT:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-card-id-PUT
            CodeUri: ./src/functions/put_card_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSCardCardIdPUT:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /card/{id}/{proxy+}
                        Method: put
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSCardIdDELETE:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-card-id-DELETE
            CodeUri: ./src/functions/delete_card_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSCardCardIdDELETE:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /card/{id}/{proxy+}
                        Method: delete
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable

    VMSApprovalGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-approval-GET
            CodeUri: ./src/functions/get_approval
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSApprovalGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /approval/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSApprovalPOST:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-approval-POST
            CodeUri: ./src/functions/post_approval
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSApprovalPOST:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /approval/{proxy+}
                        Method: post
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSApprovalIdGET:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-approval-id-GET
            CodeUri: ./src/functions/get_approval_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSApprovalApprovalIdGET:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /approval/{id}/{proxy+}
                        Method: get
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable
    VMSApprovalIdPATCH:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Environment}-VMS-approval-id-PATCH
            CodeUri: ./src/functions/patch_approval_id
            Handler: app.lambda_handler
            Runtime: python3.11
            Layers:
                - !Ref VMSLayer
            Events:
                VMSApprovalApprovalIdPATCH:
                    Type: Api
                    Properties:
                        RestApiId: !Ref VMSApiGateway
                        Path: /approval/{id}/{proxy+}
                        Method: patch
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBTable

Outputs:
    VMSApiEndpoint:
        Description: "VMS API Gateway endpoint URL"
        Value: !Sub "https://${VMSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
